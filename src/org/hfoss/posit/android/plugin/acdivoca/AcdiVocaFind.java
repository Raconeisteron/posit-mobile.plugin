/*
 * File: AcdiVocaFind.java
 * 
* Copyright (C) 2011 The Humanitarian FOSS Project (http://www.hfoss.org)
 * 
 * This file is part of the ACDI/VOCA plugin for POSIT, Portable Open Search 
 * and Identification Tool.
 *
 * This plugin is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL) as published 
 * by the Free Software Foundation; either version 3.0 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU LGPL along with this program; 
 * if not visit http://www.gnu.org/licenses/lgpl.html.
 * 
 */

package org.hfoss.posit.android.plugin.acdivoca;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.hfoss.posit.android.api.Find;
import org.hfoss.posit.android.provider.PositDbHelper;

import com.j256.ormlite.field.DatabaseField;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.util.Log;

/**
 * Represents a specific find for a project, with a unique identifier
 * 
 */

public class AcdiVocaFind {
	private static final String TAG = "AcdiVocaFind";
	
	public static final String TEST_FIND = "id=0, address=null, category=null,"
		+ "changeType=null, communeSection=null, sex=null,"
		+ "distributionPost=null, dob=null, dossier=null, firstName=Ralph,"
		+ "relativeTwo=null, relativeOne=null, nameAgriParticipant=null,"
		+ "lastName=Morelli, householdSize=null, hasHoe=false,"
		+ "hasMachette=false, hasPelle=false, hasPick=false,"
		+ "hasSerpette=false, hasTree=false, hasTuber=false, hasVege=false,"
		+ "hasGrafting=false, id=0, isArtisan=false, isChanged=false,"
		+ "isDistributionPresent=false, isFarmer=false, isFisherman=false,"
		+ "isMotherLeader=false, isMuso=false, isOther=false,"
		+ "isParticipatingAgri=false, isParticipatingMchn=false,"
		+ "isPartnerCROSE=false, isPartnerFAO=false, isPartnerMARDNR=false,"
		+ "isPartnerOther=false, isPartnerPLAN=false, isPartnerSAVE=false,"
		+ "isRancher=false, isStoreOwner=false, landAmount=0,"
		+ "hasCoffee=false, messageId=0, messageStatus=0, hasCereal=false,"
		+ "projectId=0, hasBrouette=false, hasBarreamines=false,"
		+ "distributionMonthsRemaining=0, status=0, type=0,"
		+ "visitedByMotherLeader=false";
	
	// id is generated by the database and set on the object automagically
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_ID, generatedId = true)  int id;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_DOSSIER) String dossier;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_TYPE) int type;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_STATUS) int status;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_MESSAGE_ID) int message_id;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_MESSAGE_STATUS) int message_status;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_FIRSTNAME) String firstname;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_LASTNAME) String lastname;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_ADDRESS) String address;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_DOB) String dob;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_SEX) String sex;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HOUSEHOLD_SIZE) String household_size;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_BENEFICIARY_CATEGORY) String beneficiary_category;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_DISTRIBUTION_POST) String distribution_post;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_Q_MOTHER_LEADER) boolean mother_leader;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_Q_VISIT_MOTHER_LEADER) boolean visit_mother_leader;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_Q_PARTICIPATING_AGRI) boolean participating_agri;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_Q_PARTICIPATING_BENE) boolean participating_bene;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_FARMER) boolean is_farmer;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_MUSO) boolean is_MUSO;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_RANCHER) boolean is_rancher;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_STOREOWN) boolean is_store_owner;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_FISHER) boolean is_fisher;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_ARTISAN) boolean is_artisan;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_IS_OTHER) boolean is_other;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_LAND_AMOUNT) int amount_of_land;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_VEGE) boolean have_vege;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_TUBER) boolean have_tuber;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_CEREAL) boolean have_cereal;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_TREE) boolean have_tree;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_GRAFTING) boolean have_grafting;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_COFFEE) boolean have_coffee;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_PARTNER_FAO) boolean partner_fao;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_PARTNER_SAVE) boolean partner_save;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_PARTNER_CROSE) boolean partner_crose;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_PARTNER_PLAN) boolean partner_plan;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_PARTNER_MARDNR) boolean partner_mardnr;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_PARTNER_OTHER) boolean partner_other;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_COMMUNE_SECTION) String communeSection;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_HOUE) boolean have_hoe;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_PIOCHE) boolean have_pick;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_BROUETTE) boolean have_wheelbarrow;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_MACHETTE) boolean have_machete;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_SERPETTE) boolean have_pruning_knife;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_PELLE) boolean have_shovel;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_HAVE_BARREAMINES) boolean have_crowbar;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_RELATIVE_1) String relative_1;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_RELATIVE_2) String relative_2;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_Q_CHANGE) boolean ChangeInStatus;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_CHANGE_TYPE) String ChangeType;
	
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_Q_PRESENT) boolean Present;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_MONTHS_REMAINING) int MonthsRemaining;
	@DatabaseField(columnName = AcdiVocaDbHelper.FINDS_NAME_AGRI_PARTICIPANT) String name_agri_participant;	
	
	AcdiVocaFind () {
		// Necessary by ormlite
	}
	
	/**
	 * Construct an instance from a collection of ContentValues
	 * @param values
	 */
	AcdiVocaFind(ContentValues values) {
		update(values);
	}
	
	/**
	 * Updates fields from ContentValues retrieved from View.
	 * @param values
	 */
	public void update(ContentValues values) {
		Field[] fields = this.getClass().getDeclaredFields();
		for (Field field : fields) {
			Object obj = null;
			String fieldName = null;
			try {
				fieldName = field.getName();
				obj = field.get(this);
				if (field.getName().equals("TEST_FIND") || field.getName().equals("TAG"))
					continue;	
				if (!values.containsKey(fieldName))
					continue;
				Log.i(TAG, "field: " + fieldName);
				if (obj instanceof String) {
					String s = values.getAsString(fieldName);
					field.set(this, s);
					Log.i(TAG, "Set " + fieldName + "=" + s);
				} else if (obj instanceof Boolean) {
					Log.i(TAG, "Boolean value: " + values.getAsString(fieldName));
					Boolean bVal = values.getAsBoolean(fieldName);
					boolean b = false;
					if (bVal != null)
						b = bVal;
					field.set(this, b);
					Log.i(TAG, "Set " + fieldName + "=" + b);
				} else if (obj instanceof Integer) {
					Integer iVal = values.getAsInteger(fieldName);
					int i = 0;
					if (iVal != null)
						i = iVal;
					field.set(this, i);
					Log.i(TAG, "Set " + fieldName + "=" + i);
				} else  {
					String s = values.getAsString(fieldName);
					field.set(this, s);
					Log.i(TAG, "Set " + fieldName + "=" + s);
				}
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassCastException e) {
				Log.e(TAG, "Class cast exception on " + fieldName + "="  + obj);
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Sets this object's attributes from attr/value pair string.
	 * @param attrValPairs
	 */
	public void init(String attrValPairs) {
		String[] pairs = attrValPairs.split(",");
		for (String pair:pairs) {
			String[] attr_val = pair.split("=");
			String attr = attr_val[0].trim();
			String val = attr_val[1].trim();
			Field f = null;
			try {
				f = getClass().getDeclaredField(attr);
				setField(f, val);
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoSuchFieldException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	private void setField(Field f, String val) {
		try {
			Class type = f.getType();
			Object o = f.get(this);
			if (o instanceof Boolean) 
				f.setBoolean(this, (Boolean) o);
			else if (o instanceof Integer) 
				f.setInt(this, (Integer) o);
			else if (o instanceof String) 
				f.set(this, o.toString());
			else 
				f.set(this, o);
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Returns the Beneficiary as a collection of ContentValues.
	 * @return
	 */
	public ContentValues toContentValues() {
		ContentValues values = new ContentValues();
		Field[] fields = this.getClass().getDeclaredFields();
		for (Field field : fields) {
			if (field.getName().equals("TEST_FIND"))
				continue;
			Object obj = null;
			String fieldName = null;
			try {
				fieldName = field.getName();
				obj = field.get(this);
				if (obj instanceof String) {
					values.put(fieldName, (String) obj);
				} else if (obj instanceof Boolean) {
					values.put(fieldName, (boolean) ((Boolean) obj));
				} else if (obj instanceof Integer) {
					values.put(fieldName, (Integer) obj);
				} else 
					values.put(fieldName, (String) obj);
//				Log.i(TAG, "Field = " + fieldName + " value = " + obj);
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassCastException e) {
				Log.e(TAG, "Class cast exception on " + fieldName + "="  + obj);
				e.printStackTrace();
			}
		}
		return values;
	}
	
	/**
	 * Returns a representation of this Find in a highly compressed
	 * Sms (Text) message.
	 * @return
	 */
	public AcdiVocaMessage toSmsMessage() {
		int msg_id = AcdiVocaDbHelper.UNKNOWN_ID;
		int beneficiary_id = id;   //AcdiVocaDbHelper.UNKNOWN_ID;
		int beneficiary_status = -1;
		int message_status = -1;
		String statusStr = "";
		
		String rawMessage = toString();
		String smsMessage = "";
		if (status == AcdiVocaDbHelper.FINDS_STATUS_UPDATE) 
			smsMessage = toSmsUpdateMessage();
		else if (status == AcdiVocaDbHelper.FINDS_STATUS_NEW && type == AcdiVocaDbHelper.FINDS_TYPE_MCHN)
			smsMessage = toSmsNewMchnMessage();
		else if (status == AcdiVocaDbHelper.FINDS_STATUS_NEW && type == AcdiVocaDbHelper.FINDS_TYPE_AGRI)
			smsMessage = toSmsNewAgriMessage();

////		String smsMessage = abbreviateBeneficiaryStringForSms(rawMessage);
//		

////		}

		// Create a header (length and status) to message
		String msgHeader = "MsgId:" + msg_id + ", Len:" + smsMessage.length() +  ", " + statusStr 
		+ " Bid = " + beneficiary_id;

		return new AcdiVocaMessage(msg_id, 
				beneficiary_id, 
				AcdiVocaDbHelper.MESSAGE_STATUS_UNSENT,
				rawMessage, smsMessage, msgHeader,!AcdiVocaMessage.EXISTING);
	}
	
	/**
	 * Prepares the SMS for an update beneficiary (i.e., with DOSSIER number and distribution post).
	 * @return
	 */
	private String toSmsUpdateMessage() {
		StringBuilder sb = new StringBuilder();
		final String EQ = AttributeManager.ATTR_VAL_SEPARATOR;
		final String COMMA = AttributeManager.PAIRS_SEPARATOR;
		sb.append(AttributeManager.ABBREV_DOSSIER).append(EQ).append(dossier);
		sb.append(COMMA).append(AttributeManager.ABBREV_TYPE).append(EQ).append(type);
		sb.append(COMMA).append(AttributeManager.ABBREV_STATUS).append(EQ).append(status);
		sb.append(COMMA).append(AttributeManager.ABBREV_FIRST).append(EQ).append(firstname);
		sb.append(COMMA).append(AttributeManager.ABBREV_LAST).append(EQ).append(lastname);
		sb.append(COMMA).append(AttributeManager.ABBREV_LOCALITY).append(EQ).append(address);
		String adjDob = AcdiVocaDbHelper.adjustDateForSmsReader(dob);
		sb.append(COMMA).append(AttributeManager.ABBREV_DOB).append(EQ).append(adjDob);
		sb.append(COMMA).append(AttributeManager.ABBREV_SEX).append(EQ).append(AttributeManager.mapToShort(sex));
		sb.append(COMMA).append(AttributeManager.ABBREV_CATEGORY).append(EQ).append(AttributeManager.mapToShort(beneficiary_category));
		sb.append(COMMA).append(AttributeManager.ABBREV_DISTRIBUTION_POST).append(EQ).append(distribution_post);
		sb.append(COMMA).append(AttributeManager.ABBREV_CHANGE_TYPE).append(EQ).append(ChangeType);
		sb.append(COMMA).append(AttributeManager.ABBREV_Q_CHANGE).append(EQ).append(AttributeManager.mapToShort(ChangeInStatus));
		sb.append(COMMA).append(AttributeManager.ABBREV_MONTHS).append(EQ).append(MonthsRemaining);
		return sb.toString();
	}
	
	
	/**
	 * Prepares the SMS for an new MCHN beneficiary.
	 * @return
	 */
	private String toSmsNewMchnMessage() {
		StringBuilder sb = new StringBuilder();
		final String EQ = AttributeManager.ATTR_VAL_SEPARATOR;
		final String COMMA = AttributeManager.PAIRS_SEPARATOR;
//		sb.append(AttributeManager.ABBREV_DOSSIER).append(EQ).append(dossier);  // Note needed for New Mchn?
//		sb.append(COMMA).
		sb.append(AttributeManager.ABBREV_TYPE).append(EQ).append(type);
		sb.append(COMMA).append(AttributeManager.ABBREV_STATUS).append(EQ).append(status);
		sb.append(COMMA).append(AttributeManager.ABBREV_FIRST).append(EQ).append(firstname);
		sb.append(COMMA).append(AttributeManager.ABBREV_LAST).append(EQ).append(lastname);
		sb.append(COMMA).append(AttributeManager.ABBREV_LOCALITY).append(EQ).append(address);
		String adjDob = AcdiVocaDbHelper.adjustDateForSmsReader(dob);
		sb.append(COMMA).append(AttributeManager.ABBREV_DOB).append(EQ).append(adjDob);
		sb.append(COMMA).append(AttributeManager.ABBREV_SEX).append(EQ).append(AttributeManager.mapToShort(sex));
		sb.append(COMMA).append(AttributeManager.ABBREV_CATEGORY).append(EQ).append(AttributeManager.mapToShort(beneficiary_category));
		sb.append(COMMA).append(AttributeManager.ABBREV_DISTRIBUTION_POST).append(EQ).append(distribution_post);
		sb.append(COMMA).append(AttributeManager.ABBREV_NUMBER_IN_HOME).append(EQ).append(household_size);
		sb.append(COMMA).append(AttributeManager.ABBREV_IS_MOTHERLEADER).append(EQ).append(AttributeManager.mapToShort(mother_leader));
		sb.append(COMMA).append(AttributeManager.ABBREV_VISIT_MOTHERLEADER).append(EQ).append(AttributeManager.mapToShort(visit_mother_leader));
		sb.append(COMMA).append(AttributeManager.ABBREV_RELATIVE_1).append(EQ).append(relative_1);
		sb.append(COMMA).append(AttributeManager.ABBREV_PARTICIPATING_BENE).append(EQ).append(AttributeManager.mapToShort(participating_agri));
		sb.append(COMMA).append(AttributeManager.ABBREV_RELATIVE_2).append(EQ).append(relative_2);
		return sb.toString();
	}
	
	/**
	 * Prepares the SMS for an new Agri beneficiary.
	 * @return
	 */
	private String toSmsNewAgriMessage() {
		StringBuilder sb = new StringBuilder();
		final String EQ = AttributeManager.ATTR_VAL_SEPARATOR;
		final String COMMA = AttributeManager.PAIRS_SEPARATOR;
//		sb.append(AttributeManager.ABBREV_DOSSIER).append(EQ).append(dossier);
//		sb.append(COMMA).
		sb.append(AttributeManager.ABBREV_TYPE).append(EQ).append(type);
		sb.append(COMMA).append(AttributeManager.ABBREV_STATUS).append(EQ).append(status);
		sb.append(COMMA).append(AttributeManager.ABBREV_FIRST).append(EQ).append(firstname);
		sb.append(COMMA).append(AttributeManager.ABBREV_LAST).append(EQ).append(lastname);
		sb.append(COMMA).append(AttributeManager.ABBREV_LOCALITY).append(EQ).append(address);
		String adjDob = AcdiVocaDbHelper.adjustDateForSmsReader(dob);
		sb.append(COMMA).append(AttributeManager.ABBREV_DOB).append(EQ).append(adjDob);
		sb.append(COMMA).append(AttributeManager.ABBREV_SEX).append(EQ).append(AttributeManager.mapToShort(sex));
		sb.append(COMMA).append(AttributeManager.ABBREV_NUMBER_IN_HOME).append(EQ).append(household_size);
		sb.append(COMMA).append(AttributeManager.ABBREV_LAND_AMT).append(EQ).append(amount_of_land);	
//		sb.append(COMMA).append(AttributeManager.ABBREV_CATEGORY).append(EQ).append(beneficiary_category);
		sb.append(COMMA).append(AttributeManager.ABBREV_COMMUNE_SECTION).append(EQ).append(AttributeManager.mapToShort(communeSection));
		sb.append(COMMA).append(AttributeManager.ABBREV_PARTICIPATING_BENE).append(EQ).append(AttributeManager.mapToShort(participating_bene));
		sb.append(COMMA).append(AttributeManager.ABBREV_RELATIVE_2).append(EQ).append(relative_2);
		
		
		String isAFields = AttributeManager.encodeBinaryFields(getIsOrHasOrPartnerFields("is"), 
				AttributeManager.isAFields, 
				AttributeManager.ABBREV_ISA);
		String hasAFields = AttributeManager.encodeBinaryFields(getIsOrHasOrPartnerFields("have"), 
				AttributeManager.hasAFields,
				AttributeManager.ABBREV_HASA);
		sb.append(COMMA).append(isAFields);
		sb.append(COMMA).append(hasAFields);
		
		return sb.toString();
	}
	
	
	private String getIsOrHasOrPartnerFields(String prefix) {
		StringBuilder sb = new StringBuilder();
		Field[] fields = this.getClass().getDeclaredFields();
		final String COMMA = AttributeManager.PAIRS_SEPARATOR;
		final String EQ = AttributeManager.ATTR_VAL_SEPARATOR;
		
		for (Field field : fields) {
			if (field.getName().startsWith(prefix)) {
				String abbrev = AttributeManager.mapToShort(field.getName());
				try {
					sb.append(COMMA).append(abbrev).append(EQ).append(field.get(this));
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}		
			}
		}
		return sb.toString();
	}

	
	/**
	 * Converts a String representing a beneficiary string into an abbreviated
	 * string. If the String already contains an SMS message in its 'message_text'
	 * field, then no need to construct it again.
	 * @param beneficiary a string of the form attr1-value1,attr2=value2...
	 * @return a String of the form a1=v1, ..., aN=vN
	 */
	private String abbreviateBeneficiaryStringForSms(String beneficiary) {
        String message = "";
        String abbrev = "";
        String[] pair = null;
        
        String[] attr_val_pairs = beneficiary.split(",");
        String attr = "";
        String val = "";
        for (int k = 0; k < attr_val_pairs.length; k++) {
            //Log.i(TAG, "Pair-" + k + " = " + attr_val_pairs[k]);
            pair = attr_val_pairs[k].split("=");
            if (pair.length == 0) {
                attr = "";
                val = "";
            } else if (pair.length == 1) {
                attr = pair[0].trim();
                val = "";
            } else {
                attr = pair[0].trim();
                val = pair[1].trim();
            }

            if (!attr.equals(AcdiVocaDbHelper.FINDS_ID) 
                    && !attr.equals(AcdiVocaDbHelper.FINDS_PROJECT_ID) 
                    //&& !attr.equals(FINDS_MESSAGE_TEXT) 
                    && !val.equals("null")
                    ) {
                if(attr.equals(AcdiVocaDbHelper.FINDS_DOB))
                    abbrev = AttributeManager.convertAttrValPairToAbbrev(attr, AcdiVocaDbHelper.adjustDateForSmsReader(val));
                if(attr.equals(AcdiVocaDbHelper.FINDS_DISTRIBUTION_POST)) //new code to manage codes already in DB
                    abbrev = AttributeManager.getMapping(AcdiVocaDbHelper.FINDS_DISTRIBUTION_POST) + AttributeManager.ATTR_VAL_SEPARATOR + val;
                else
                    abbrev = AttributeManager.convertAttrValPairToAbbrev(attr, val);
                //abbrev = AttributeManager.convertAttrValPairToAbbrev(attr, val);
                if (!abbrev.equals(""))
                    message += abbrev + ",";
            }
        }
        return message;
    }
	
	/**
	 * Construct a raw message for this Find with full attribute names.
	 * For each attribute (field), concatenate an attr=val pair.
	 * @return
	 */
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("id=").append(id);
		Field[] fields = this.getClass().getDeclaredFields();
		for (Field field : fields) {
			if (field.getName().equals("TEST_FIND") || field.getName().equals("TAG"))
				continue;
			try {
				sb.append(", ").append(field.getName()).append("=").append(field.get(this));
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}		
		}
		return sb.toString();
	}
	
}